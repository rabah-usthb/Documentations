first define static constraint and dynamic too :

person(idperson,nom,datenaissance,lieunaissance,biographie)
format constraint correct type 
idperson : primary key (unique & not null) verification 
when inserting
nom : not null
datenaissance check (datenaissance < sysdate)


film(idfilm ,titre,annee,description,idrealisateur*)
idfile primary key
idrealisateur foreign key (insert it has to exist in realisateur
in delete cant delete from referencde table

rolefilm(idacteur*,idfilm*,person)

gentefilm(idfilm,genre)

create or replace function mostRecentFilm(idPerson IN number) 
return number
is 
recent_year number;

begin
select max(annee) into recent_year from film
where idrealiteur = idperson;
return recent_year;
Exception
when No_data_found then :DBMS_output_putline('19999','aucun film n'a ete realise
par' || idperson);return NULL;
end mostRecentFilm;




CREATE OR REPLACE TRIGGER trigger_ex1
BEFORE INSERT ON film
FOR EACH ROW
DECLARE
    nbCategory NUMBER;
BEGIN
    -- Count the number of distinct genres for the director
    SELECT COUNT(DISTINCT g.genrefilm) 
    INTO nbCategory 
    FROM genrefilm g 
    WHERE g.idfilm IN 
    (SELECT idfilm FROM film WHERE idrealisateur = :new.idrealisateur);

    -- Check if the number of genres exceeds 5
    IF nbCategory >= 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'A director cannot have more than 5 genres.');
    END IF;
END;
/



CREATE OR REPLACE TRIGGER trigger_ex1
BEFORE INSERT ON film
FOR EACH ROW
DECLARE
    nbCategory NUMBER;
BEGIN
    -- Count the number of distinct genres for the director
    SELECT COUNT(DISTINCT g.genrefilm) 
    INTO nbCategory 
    FROM genrefilm as g inner join film as f
    on f.idrealisateur = :new.idrealisteur

    -- Check if the number of genres exceeds 5
    IF nbCategory >= 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'A director cannot have more than 5 genres.');
    END IF;
END;
/




CREATE OR REPLACE TRIGGER trigger_ex1
BEFORE INSERT ON rolefilm
FOR EACH ROW
DECLARE
    v_count NUMBER;  -- Variable to hold the count of matching rows
BEGIN
    -- Count the number of roles for the given actor in films directed by the specified director
    SELECT COUNT(*) 
    INTO v_count
    FROM rolefilm rf
    INNER JOIN film f ON f.idfilm = rf.idfilm
    WHERE f.idrealisateur = :new.idacteur;

    -- Check if any roles were found
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'realisator cant be actor too');
    END IF;
END;
/

update  projet
set nbemploye = (select count(*) from affectation a
inner join projet p on p.nproj = a.nproj)




CREATE OR REPLACE TRIGGER trigger_ex1
AFTER INSERT OR AFTER DELETE ON affectation
FOR EACH ROW
BEGIN

END;
